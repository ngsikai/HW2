This is the README file for A0124828B and A0131188H's submission

== General Notes about this assignment ==

Place your comments or requests here for Min to read.  Discuss your
architecture or experiments in general.  A paragraph or two is usually
sufficient.

Indexing:
The training input is broken down to sentences, and further broken down to
lists of characters after having their language labels removed. After each
ngram is generated, a check will be run to check whether they are already inside
the dictionary. If it is, one more count will be added to its number of
occurrences for that particular ngram. If not, a new entry will be created with
add-one smoothing done for every language, after which one more count will then
be added to the corresponding language for that particular ngram.

Searching:
Preprocessing of test input is similar to the training phase, except that there
is no language label to remove this time. For each ngram generated from the test
input, the probability values of it occurring for each language will be computed.
The logarithm function is used to prevent underflow of the small probability
values once they get multiplied together. The language with the largest resulting
probability value for the given sentence will then be flagged as the predicted
language.
There is however, one more caveat for Out Of Vocabulary languages -- "other"
Using the approach above causes one sentence in the test input to slip through
as a registered language. This is because ngrams that are unencountered by the
trained LM are simply neglected and unaccounted for, meaning sentences
containing absolute gibberish only need to have one sequence of 4 characters
that have been registered in the LM to be considered a valid language.
This loophole was dealt with by factoring the percentage of unencountered(invalid)
ngrams there are in all ngrams generated. If more than 70% of the ngrams are
unencountered, the sentence is considered Out Of Vocabulary. This threshold will
be adjusted according to the amount of training input given as well as the size
of each ngram.

== Files included with this submission ==

List the files in your submission here and provide a short 1 line
description of each file.  Make sure your submission's files are named
and formatted correctly.

index.py
Program that takes in training data, index it and write out the dictionary and
postings lists created into two output files.

search.py
Program that takes in the dictionary file and postings list file generated by
index.py and outputs the results of given queries.

merge.py
Module that holds the logic of the merge functions used in search.py.

objects.py
Module that contains the logic behind the Word and Query classes used in shunting_yard.py.

shunting_yard.py
Module that contains the logic behind the modified shunting_yard algorithm used
to process the boolean queries.

dictionary.txt
Dictionary

postings.txt
Desc

README.txt
Descriptions of submitted files as well as Statement of individual work.

ESSAY.txt
Essay questions as part of the homework assignment.

== Statement of individual work ==

Please initial one of the following statements.

[x] We, A0124828B and A0131188H, certify that I have followed the CS 3245 Information
Retrieval class guidelines for homework assignments.  In particular, I
expressly vow that I have followed the Facebook rule in discussing
with others in doing the assignment and did not take notes (digital or
printed) from the discussions.

[ ] We, A0124828B and A0131188H, did not follow the class rules regarding homework
assignment, because of the following reason:

<Please fill in>

I suggest that I should be graded as follows:

<Please fill in>

== References ==

<Please list any websites and/or people you consulted with for this
assignment and state their role>

Java Implementation of Boolean shunting_yard algorithm that we adapted for our
shunting_yard.py
http://codereview.stackexchange.com/questions/89967/boolean-expressions-from-infix-to-postfix-notation-using-dijkstras-shunting-yar
